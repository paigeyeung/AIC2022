package wtest_evolution;

import aic2022.user.*;

import java.util.Arrays;

public class Troop extends AllyUnit {
    Troop(UnitController uc) {
        super(uc);
    }

    // 7 input -> 16 hidden -> 16 hidden -> 9 output
    final int[] LAYER_SIZES = {7, 16, 16, 9};
    // Weights are outgoing weights
    /*weights_start*/double[][][] weights = {{{0.4605328069968806, -0.8792092599412369, 1.4486727626767761, -1.1538593981575627, -1.3596743391809318, -0.14604560949282153, 0.21045680752109552, -0.8855754417279127, 1.8977994961918774, -0.6415598381677983, -1.932467726378341, -0.7215853002477788, 1.9340642217639195, 1.2197536609021182, -1.4350519073445436, -0.006211707790327203}, {0.6499294762219177, 0.710910596456205, -0.5784490643458473, -0.5160080955724728, 1.808695674255374, -0.7340985251636165, -0.947501772805702, -1.8353863421875105, 1.0854161688794721, 0.12980772093000637, 1.6078028447534867, 0.11082773139619118, 1.9884269555658372, -1.3103582174962631, 0.5488519636276177, -0.7720994996002579}, {1.986649415962317, -0.01677274526771777, -1.4746917236428723, -0.21772308713598232, -0.5735845170608433, 0.494931329261711, -1.7896379560894413, -0.2755430701250705, 0.24262214690363448, -0.5275269293383364, -0.5038540743801421, -0.7879149992784464, 0.8472061000973676, 0.4405365932140395, -0.3963467218757435, -0.6684969201249622}, {1.1719887319927573, -0.19509635802445136, -1.2478347386510542, -0.623503877113833, 0.34874467699860556, 1.6315513000101198, 1.704855978229146, -0.5608030111765094, 1.028270232220179, -1.7915904764621509, 1.8515852860071322, -0.10243806193095972, -0.8506683117294314, 1.8638237985832173, -1.3942950466387445, -1.360451736896132}, {1.298572126436282, 0.722208999876707, 1.3017912306397457, -1.4395582133860354, -1.744170741953528, -1.9373155663219115, 0.1311041169448215, 1.218949599439505, -0.5830002111157708, -1.2257554735792144, -0.5737329682150558, 0.572661390287593, -0.7408900709388608, -0.31003830962922807, 0.07595977495580808, 1.9637688170564083}, {-1.691028077464662, 1.0962794592070613, 0.3403282706717907, 0.10494728971954892, 1.4011380831901512, -1.5363267310874762, 1.8443676684207468, -1.6422389483129378, 0.05420894548940236, -1.9439171441015821, -1.2350841005265822, -0.1049511136375707, -1.6474955609027653, -0.4597742868382704, 0.24597988688097594, -0.7120448443314364}, {1.6906103514805118, 0.8834014625160966, 0.379438113807415, -0.2483011876250254, 0.8338764661664442, 0.6253974417099482, 1.5117699954504173, 1.5010476309878364, -1.8991275710260203, -1.1236278142052263, 0.19431522900102038, 1.6776272346675887, 1.5476474023987454, 0.38064752222211684, 0.868436460055237, -1.538284769141351}}, {{1.919652253021951, -0.8604146819251564, -1.565580929776389, -1.3741297945210764, 1.8634647511781437, 0.18892535314234538, -0.19409573970310756, 1.8928466760807643, -0.12063526134071179, -0.6144387900172927, -1.714162077062391, 1.8818063521516168, -0.4753806396697273, 1.9591894092207593, 1.7509647440898943, 0.7814637736451475}, {1.4300158601651671, 1.1061963320575856, -0.3382084988047538, 1.6556508465419806, -0.2624393190689367, -1.3726342204361983, 0.8363630732519507, 0.10444561423711951, -0.38832868374773, -1.0312677687120502, 1.8417371555587705, 1.1101299081653644, 1.766039712192737, -1.4195850357404902, -0.3014939052871535, 1.5317299392444692}, {1.7018305195329217, 1.9920841980247164, -0.30773184546125476, 1.3291205301209743, -0.9634217367903739, 1.8284868006096064, 0.8459330840588275, -0.24607099523939757, -1.8049354996629714, -1.9435421300838782, 0.1821846141019856, -0.5165407242300977, -0.7744619343900401, 1.981712473219015, 0.23764424042289845, -0.31476128719241814}, {0.17814516829188065, -0.36132159678039555, -1.1709727361169917, 0.5863907617545436, -1.1813722996555, -1.3100753935070681, -0.17024895308845522, 0.7999334354474308, -0.2947950740564176, -1.8249889473387793, 1.2508074194862804, -0.9111371618530342, -0.5650628932185255, 1.7985047963738499, 0.5342017697737291, -0.035435216326839214}, {-0.07000876489675534, 0.25656947597702784, 1.9653825559556095, 0.7396478860016367, -1.046183853621638, 1.8477901174893425, -0.5327846921483244, 0.05116094621897149, -1.5154197763795767, 0.3933813508260311, 0.9007227469345369, -1.9335492305175688, -0.6987688761801389, 1.0198459045316839, 0.808983049816097, -0.7520491141658119}, {-1.3754720925504245, -0.15609683476512348, -1.9436271459878918, 1.5767521936063367, -0.5910575384517367, -0.4420182089792193, 1.2906130280442314, 0.720278115746849, -1.8541969825768714, 1.6119616151526728, 1.5589911962736949, -1.3004535039105, -0.30097218665294934, 0.38512085669361973, -1.9163184207964714, -1.594259413460366}, {0.31244549294810176, 1.1205901711400754, 1.4246774576158447, 0.9887192785593433, 0.8834390684097397, -0.7224726245228505, -1.1381200481888993, -1.6876307445897845, 0.650058814659007, 0.8503960117010143, 0.10245835429186556, -1.0158041292858417, -1.2409080940834487, -1.5196604142695835, -1.4766103872009646, -1.0951066310691133}, {-0.26354350314281216, 1.847501335031677, 1.167822337387788, 1.0634273419656433, -0.8456959784456508, 0.4462327424980246, 0.6371432881090682, 0.3233371289149036, 0.7571688792337601, -1.9610631643374594, -0.3030803577140615, 1.7180962983241321, -0.7232091917131833, 0.2941750721765839, -0.909573749752961, 0.3518112780951279}, {1.4701216889628137, 1.882087726671938, -1.1139777847116186, 1.0769236297242992, 0.10045671160112546, -0.9052806056496414, -0.10516071139425431, 1.6646067795596675, 0.9554558778135607, 0.6556626088970865, -1.481015864361623, -0.848735550742088, -1.777390227913659, 0.6247701806219887, -0.9193450955420861, -0.18307399093922117}, {0.940662473584919, -0.3304775875670045, 1.4918806761209762, -0.7648845974301239, 0.01570057787771928, -1.34190098364307, 1.6927772837165365, -1.244912570214816, -1.2970126360985765, 1.6349030748340883, -0.014916021082437059, 1.9352719586102634, 1.670507792897539, -0.37936895951564287, -0.32784840201633925, 0.6021110987360125}, {0.31682698367605244, 0.47963666622593015, 0.6371452913574212, 0.22267859124563838, 0.5709160706220873, -1.5617293162328698, -1.5924085419913308, -0.16520869063507293, -0.9227336260036085, -1.4523202456537558, 0.819704000590749, -0.9690536617155208, 1.1949561228801415, 1.4109921266101715, 0.3974311822979226, -0.9625818311308936}, {-1.8609816434632789, -0.37698534327472766, 1.8828765744380749, -0.5124984555897574, -0.200041485938514, -1.0321245684414087, 1.2066491626162725, -1.3365017698590824, 0.38826566187107847, 1.6522662384426674, 0.2635145671484165, 0.5920873856470594, 0.2269226973960996, -1.4013592832178068, 1.1397541581399944, -0.011006015672288427}, {-0.7139754337414317, -0.9083780503265304, 0.7812074195772722, -1.779862608833636, 0.05291228990886099, -0.7950570761115245, -1.686094614302435, -0.11434248286445747, -0.4635042047665192, -0.8326612801768829, 1.3465620382874053, -0.6509169315804915, 0.864120747624149, -1.9633376718684161, 0.4949990643143414, -1.795157606179632}, {-0.37134177289505965, 0.31744179440672626, 0.39641492646426757, -0.18100676685008654, -1.7261366008178354, 1.71814499223101, 0.8575078727055652, 1.3690083542899623, -0.5871586827333912, -1.5834108763878039, 1.349378364896546, 0.6180671609573061, 1.8417361954026186, 0.873695347182271, 0.1450403029721703, -1.9183442673222855}, {1.0893963178264197, 1.7152046714386833, 1.0833903866289174, -1.7480805541073843, 0.9953358591643893, 0.04979805865904696, 1.5843127794395908, -0.2058254859182207, 1.9621150648351042, 1.0375667678521845, -1.8141785154057644, 0.6439187776515958, 1.9775578224479031, -1.154816809373207, -0.2616662957500848, 0.9721982282286064}, {1.3488248243464471, -0.6289050182379294, 1.5594569888771996, -0.9184983477748854, -1.3358219857299325, -0.520943746107239, -0.5184221571844869, 0.22823663006582118, 1.9337241087255284, -1.762776822515101, 0.9878477558180143, 1.3114710687464481, -0.49733764864467345, 0.4415929004533683, 0.6850139709113279, 1.6396571246033371}}, {{-0.5096158885591273, 1.471958372210687, 0.05360117716787327, 1.3937881972644623, 1.123550623260349, 1.6406205056121541, 0.6864952746309791, 1.8244187220222314, -1.4911852453027095}, {-1.7897274264724952, -0.8278278042007692, 1.5175316686758493, 1.5941759450348107, -1.0745633363106797, 1.2842079012803413, -0.918459018168039, -1.8387485183859384, -0.6703205662130487}, {1.2602836191787357, 1.0137102780226814, 1.6305305534995846, -0.5987684630290571, -1.3386849525184452, 0.7024963551144432, -0.438994396823313, 1.7335828274301894, 0.19362473799803315}, {1.0457646092360418, -1.7870764467856683, -1.1004759787213532, 0.8838209623141147, 0.9154331695270477, -0.469721275671124, -1.6428861813173476, 0.32870478872347153, -0.04855176145291962}, {1.1927306392170478, 0.621952183545456, 0.44616628675066394, -1.2475150292538628, -0.9937134468613706, -1.6695750094441766, 0.8738834832402911, -1.3306107848854247, 1.0823651300150035}, {-1.2452710988925624, -1.3578657754849828, 1.449252803833656, -0.4175063567723618, 1.6761623314892775, -1.2412333091315846, -0.6176589186590777, -0.7211319747963914, -0.6625192131175894}, {0.1088202268459848, -0.6323923907522255, -1.2953124350803131, 1.7562035593444159, -1.3814045207887582, 1.589821330888554, -1.6459393459555542, 1.9757372623801186, 1.066525360540941}, {-0.42301971274011896, 0.6066491669305676, 1.1263879895504147, 1.884142631187114, 0.15979139978383872, -0.11844057790757079, -1.553906544464648, 1.3464879251014414, 0.234070511280287}, {-0.31103640224182527, -0.38422129859941645, -0.42425365520212166, 1.2849623301954747, -1.968494981955618, -1.7118328377782759, -0.6972683797182642, -1.5389771066414264, 1.8181680668113613}, {-1.8877437564128718, -1.6825514692588817, 0.23865610400765203, -1.3409445048195763, -1.9888460820607325, 1.370779867393718, 0.5584449003928693, -1.056395416597586, 1.643432225933974}, {1.8462137680065345, -0.6251324028771053, -1.699067842810551, -1.2688458681351396, 0.5107266264935433, -0.20427900469539306, 1.2956005840466251, -0.686813076588852, 0.17597568388991425}, {-0.11997869494115321, 0.3946959559443819, 0.819412087070567, 0.19503147691697986, 0.22662079182951267, 0.9613391230162756, -1.1311402599457114, 1.90344390324803, 0.47977089557246266}, {1.464777279231348, 1.6563379904645177, -1.0888477094440434, 0.12321440258181715, -1.1338228538525015, 1.3313689486603941, 0.6507807212639869, -1.8510338686810366, -1.9558727066847394}, {1.339067617042633, -0.05212124837342946, 0.06926940897471745, -0.5559711724574914, -1.9898949637544558, -0.018391091357695455, 1.9680198664631474, -0.01557827521848365, 1.2583568246389407}, {0.06955699955534245, -0.08135044080221832, -1.358777549744314, -1.6011927080670962, 1.8355155221600863, -1.484235897269532, -1.439536273602378, -0.1342620758926234, 1.8359993295420178}, {-1.40585003097795, -0.7853333448949709, 1.9178029475836533, 0.7060183324686702, -0.9030632805055379, -1.3805745280203343, 1.4281632963191142, 0.6444251541391761, -1.0127859178677556}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}}};/*weights_end*/
    /*biases_start*/double[][] biases = {{0, 0, 0, 0, 0, 0, 0}, {0.7084023812701092, 1.913381793665354, -1.519005508183906, -1.9423086926227393, 0.5981085651045777, -1.755920716578741, 0.37587548594612175, 0.5777710817711097, -0.7234908396742954, 1.0892099114985752, -0.6004127271344872, -0.390668565269813, -1.6473132334158214, 0.2898513736220538, -1.270390453369127, 0.06902377134741178}, {-1.355478677388398, -0.9846550002329253, 1.6899614789867567, 0.11802833375207689, -1.8571706703296091, -0.416279034381108, -0.32854070459456564, 0.599760733608357, -0.090779310558879, 1.5164509216241835, -1.0850917618344984, -1.0445017706648567, 0.574165775832173, 0.15598068929076359, 0.42862903007797426, -1.0683021297003212}, {0.20537173331701597, -0.24171234673429787, -0.3698733926086475, -1.1044058994322694, -1.8683208400927094, -1.1764533525099732, 0.9081204908065232, -1.9643187681750183, -1.745544542554042}};/*biases_end*/

    void runFirstTurn() {
        communication.downloadAllyBase();
        communication.downloadMapBoundariesAndEnemyBase();

        if(weights.length != LAYER_SIZES.length)
            uc.println("ERROR 1");
        if(biases.length != LAYER_SIZES.length)
            uc.println("ERROR 2");
        for(int layer = 0; layer < LAYER_SIZES.length; layer++) {
            if(weights[layer].length != LAYER_SIZES[layer])
                uc.println("ERROR 3");
            if(biases[layer].length != LAYER_SIZES[layer])
                uc.println("ERROR 4");
        }
    }

    void run() {
        communication.downloadMapBoundariesAndEnemyBase();
        communication.lookForMapBoundaries();

        UnitInfo nearestEnemyOrNeutral = getNearestEnemyOrNeutral();
        int[] inputData = getInputData(nearestEnemyOrNeutral);
        uc.println("inputData " + Arrays.toString(inputData));
        double[] outputs = forwardPropagate(inputData);
        uc.println("outputs " + Arrays.toString(outputs));
        Direction outputDirection = getDirectionFromOutputs(outputs);
        uc.println("outputDirection " + outputDirection);

        tryMove(outputDirection);
        if(nearestEnemyOrNeutral != null)
            tryAttack(nearestEnemyOrNeutral.getLocation());
    }

    int[] getInputData(UnitInfo nearestEnemyOrNeutral) {
        Location selfLocation = uc.getLocation();
        int relativeAllyBaseX = selfLocation.x - communication.allyBaseLocation.x;
        int relativeAllyBaseY = selfLocation.y - communication.allyBaseLocation.y;
        int nearestEnemyOrNeutralExists = 0;
        int relativeNearestEnemyOrNeutralX = 0;
        int relativeNearestEnemyOrNeutralY = 0;
        int relativeNearestEnemyOrNeutralIsExplorer = 0;
        int relativeNearestEnemyOrNeutralIsMage = 0;
        if(nearestEnemyOrNeutral != null) {
            Location nearestEnemyOrNeutralLocation = nearestEnemyOrNeutral.getLocation();
            UnitType nearestEnemyOrNeutralType = nearestEnemyOrNeutral.getType();
            nearestEnemyOrNeutralExists = 1;
            relativeNearestEnemyOrNeutralX = selfLocation.x - nearestEnemyOrNeutralLocation.x;
            relativeNearestEnemyOrNeutralY = selfLocation.y - nearestEnemyOrNeutralLocation.y;
            if(nearestEnemyOrNeutralType == UnitType.EXPLORER)
                relativeNearestEnemyOrNeutralIsExplorer = 1;
            else if(nearestEnemyOrNeutralType == UnitType.MAGE)
                relativeNearestEnemyOrNeutralIsMage = 1;
        }
        int[] inputData = {relativeAllyBaseX, relativeAllyBaseY, nearestEnemyOrNeutralExists,
                relativeNearestEnemyOrNeutralX, relativeNearestEnemyOrNeutralY,
                relativeNearestEnemyOrNeutralIsExplorer, relativeNearestEnemyOrNeutralIsMage};
        return inputData;
    }

    double relu(double x) {
        if(x > 0)
            return x;
        return 0;
    }

    double sigmoid(double x) {
        return 1 / (1 + Math.exp(-x));
    }

    double[] forwardPropagate(int[] inputData) {
        double[][] activations = new double[LAYER_SIZES.length][];
        for(int layer = 1; layer < LAYER_SIZES.length; layer++) {
            activations[layer] = new double[LAYER_SIZES[layer]];
            for(int neuron = 0; neuron < activations[layer].length; neuron++) {
                activations[layer][neuron] = 0;
                if(layer == 1) {
                    for(int previousNeuron = 0; previousNeuron < inputData.length; previousNeuron++) {
                        activations[layer][neuron] += inputData[previousNeuron] * weights[layer - 1][previousNeuron][neuron];
                    }
                }
                else {
                    for(int previousNeuron = 0; previousNeuron < activations[layer - 1].length; previousNeuron++) {
                        activations[layer][neuron] += activations[layer - 1][previousNeuron] * weights[layer - 1][previousNeuron][neuron];
                    }
                }

                activations[layer][neuron] += biases[layer][neuron];

                if(layer == LAYER_SIZES.length - 1)
                    activations[layer][neuron] = sigmoid(activations[layer][neuron]);
                else
                    activations[layer][neuron] = relu(activations[layer][neuron]);
            }
        }

        int outputLayer = LAYER_SIZES.length - 1;
        double[] outputs = new double[LAYER_SIZES[outputLayer]];
        for(int neuron = 0; neuron < activations[outputLayer].length; neuron++) {
            outputs[neuron] = activations[outputLayer][neuron];
        }
        return outputs;
    }

    Direction getDirectionFromOutputs(double[] outputs) {
        double highestOutput = 0;
        int highestOutputIndex = 0;
        for(int i = 0; i < outputs.length; i++) {
            if(outputs[i] > highestOutput) {
                highestOutput = outputs[i];
                highestOutputIndex = i;
            }
        }
        return directions[highestOutputIndex];
    }
}