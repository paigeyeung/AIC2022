package wtest_evolution;

import aic2022.user.*;
import java.util.Arrays;

public class Troop extends AllyUnit {
    Troop(UnitController uc) {
        super(uc);
    }

    // 7 input -> 16 hidden -> 16 hidden -> 9 output
    final int[] LAYER_SIZES = {7, 16, 16, 9};
    // Weights are outgoing weights
/*weights_start*/double[][][] weights = {{{-1.128207777084616, 0.7384734290627801, 0.771873519973627, 0.7796062748667613, 1.878193849300322, -0.9748975245658545, -0.002849803043493082, -1.566663238952415, 0.19471429830164555, -1.062930014519989, -1.835712942745066, -0.21949717908731825, 0.3112454818849666, -0.8604380623906754, -0.10433757363023916, -0.7298175399418732}, {-1.8447324304409827, -1.0841496594939564, -0.44841797664721006, -0.3569397613839913, -0.5836129721127219, -1.5030029488217984, -0.736451186541781, -1.851974460726984, -1.7407410482161936, -0.39886617645330824, 1.5304186064524468, -0.7403423376675758, -0.8711919714666077, 1.4246695275477257, 0.8774192151719243, 1.78884980669488}, {1.0629529882134832, -1.3315743911658269, 0.8407730436763764, 1.5980616403026968, 2.2397858858603574, 1.7102595653078443, 1.3026236499719202, 0.1618006070475605, -1.0257557816414877, -0.2703531455007504, 0.6108150319955553, -1.7547171135707913, 0.8244095484009527, -0.8354724466609775, -0.5891762778198045, -1.681353713833428}, {2.024317862077473, 1.0489115781458462, 1.665360415375599, 0.13547155710709963, 1.9593884069106968, -1.4154302770612894, 0.3359333646808218, 1.344979304104059, -1.2645755434428692, 1.5936638310907365, -1.4539437900449859, -1.5623674803690366, 1.0313132097654947, 1.0415741387653508, 0.4962782263048682, -0.37722440752377784}, {1.9318272180886358, 0.562355449405975, 1.6755341860991078, -1.2878288892604959, 1.2832115615274742, 1.3420758274137652, -1.0170218887149325, -1.7970961085591661, 0.828872693347974, -1.0381050426572862, 1.6191334829766815, 0.22294105971415124, 1.3487835693174741, 0.6681828531772839, -1.239138051138488, 0.9591545449001949}, {-0.22854721946892748, -0.5730693843259, -0.3959929222771408, 1.8334558598941713, 1.3971200024687582, 0.04479652621207782, -0.4243143789067809, 1.3791107902962962, -1.7161743970796237, 0.8254583684046269, -0.9005767156936447, 0.3995723141701688, -1.265701046529213, 1.799388264014106, -0.4189106819944157, -0.4553852162201848}, {1.1951542086133204, -1.4724700316432526, 0.9935683373566103, 0.48541999386914, -0.021551684898098333, -1.3932183088942705, -1.4252343692639668, -0.09330449283034366, -0.3730643117769349, -1.6893689252985487, -0.790145049390531, -0.9843613096023476, -0.06741057946490661, 0.28888790819450944, 1.2032292375925178, -0.10987549838300005}}, {{0.770039132752523, 0.5274582685122493, 1.2325648062375019, -0.6591946976608416, 1.6805501697901515, 0.6914819529375933, -1.4698586259618183, 0.8555750015403819, 0.2012783477892284, 0.3581886370623057, -0.27660461595640884, 1.9804316254956338, 0.1842615114294471, -1.5514004391665535, 0.04716509112862538, 1.5712015228308416}, {-1.5339151820116312, 0.18629459983488483, -0.9534746908429117, -1.2621088597240868, -1.218221921087266, 0.7480095967055636, 1.7147900233865734, -0.8762641227509095, -1.254486287655178, 1.2464162973599167, 1.028954282248181, -0.07267268033159233, 0.5390944233139834, -0.5620375885448143, -1.560659267531093, -0.6445276628647586}, {0.8175172629410639, -1.1059077281850334, -0.16752587585931597, -1.8091288363464537, -1.3063736657109333, -0.7238948891622448, 1.6098828869492257, 1.560270102460576, 1.8688384030146177, 0.7320119730654278, 0.88366681459705, -1.3942819629314287, -1.3126992480875417, -0.35914355538517806, -0.8381218955633986, -1.2624734374521396}, {1.5750603914347254, -0.4913863356592155, -0.25215121309345323, 1.6397781213763534, 0.7774633458062012, -1.2473958811473163, -1.133125439677921, 1.3588446027401482, -1.5956101413267305, 0.20030740489036358, -1.6614065191857232, 0.82709487816203, -1.2281454926277227, 1.6267574278033106, -0.04535054741939244, 1.3384762308253744}, {0.06972809006792631, 0.20424760207693873, -1.7348482810719958, 0.3549314503816609, -0.4335771230127555, -1.376711735577858, 0.01811825131928369, -1.3545823111701858, -0.7340220976156163, 0.4820111068447436, -1.1636210865537253, -2.0910553867023123, -1.7983772575225827, -0.4347911247156645, 1.3763952909563748, 1.3197399180386102}, {-0.8161859078934989, -1.790869661753568, 0.3115735946838506, 0.4322937521128754, -2.054690721255997, -0.9892513366162704, -0.08902419776013534, -0.05633537239574133, 0.8501690391091796, -0.1849131450742429, -1.4576703400181974, 1.347059494324688, -0.05270644141956121, 0.8247572824608734, 0.4285794560820099, -1.882567728774811}, {-0.9888464747774033, 1.5877810740586122, 0.6236755036711779, 0.21923617653061958, 0.3033482033030374, -1.2728332339045727, 1.156709151647644, 0.6166649559137669, 1.7907779361040608, -0.9037981836978088, 1.4241993509834039, 0.8397216654653542, -0.6954091061361474, -1.5642275289982341, -1.49020631700155, -1.4427128152351838}, {-0.1643946065378965, 2.0615930898937513, 0.54449189421073, -1.5580409318363078, 1.2271503034954887, -1.6195522618490668, 0.05405821194885274, -0.5743330970602357, -0.8005668735058697, -0.5537262665551501, 0.0934205667835844, -1.3208326424266739, -1.5593522574514114, -1.7533324051189596, 0.47602651616756325, -1.5845424889609316}, {-0.7331921011431859, -0.7676469397041232, 0.5817101917767755, 0.6533423389531805, -0.3218819558052808, 0.9074163783713125, -0.06515779203115742, 0.6680945972579023, 0.4881512046088929, -0.43616108767128947, 0.7626076526458694, 0.7757399852201844, 0.7525924298505364, -0.15932246315974902, -1.4420372900281473, 1.173104773607034}, {-0.8826545096214141, -1.3891573850675447, -0.528727657382995, 1.5978024465139258, -0.9696006896877937, -0.9077852221575906, -1.4051691389944811, -0.873261775694999, 0.7688394512760999, 0.21538016747993402, 1.8057855925842452, 1.4988494907010865, -0.05680832900438266, 0.16677901517141674, -1.0054255330303188, 0.7224608339205567}, {-0.41186259831558825, -1.086141322114633, 1.544695043499762, -0.023676493442962708, -0.7126590713594896, 1.627326682143741, 1.2365094634135145, -0.7890140434595985, 2.226307522501354, 1.3634875756236697, -1.171882703656829, -0.35160057096580527, -1.5260071353883022, 1.9246862476423263, 0.3807642996476811, 1.269728414507744}, {-0.627045998683591, 2.0593352828384592, -1.0625368723961468, 0.01079764873085165, -1.9667060580382851, 0.45948364900238875, -1.4910706565388165, -1.2491370010644478, 1.7250410473300133, -0.9580769996624443, 0.6472642811519845, -0.936995751166947, -1.9658205531583852, 1.0293225815524962, 1.961834366658929, 0.4505420444830689}, {-0.09548007455805785, -1.405808786330807, -0.4852846289790562, 2.2236477603121854, -0.32175567670221966, -0.9674696245267869, -1.016742533981212, -0.8659863108639675, -2.0716342240174748, 1.4510612276491002, 0.7061087057408131, 0.8586324179642632, 0.9017897946302724, 1.6856236048526276, 0.5620159877218209, -0.5475002394122725}, {1.1950031119450168, 1.2730638085250316, -0.4743401723872397, 0.6663483824933717, 1.2213993375046182, -0.7728963970441218, -0.4954901333977828, 1.7709719629583263, 0.5944060286163709, 1.4752191888988966, 1.2802603399832544, 0.5728582258331023, 0.9614283247026683, 0.5123548506825443, 2.015755295325948, 0.277509662900536}, {-0.8966707186934121, 1.9474469544819195, 0.025614456630684207, 0.9793412677835979, -0.5863817230783133, -0.44642327385264313, -0.08655560487417396, -1.4177832294181139, -1.3988916762865422, -0.16962110383878914, 0.8080130360585477, 1.11089332610749, -0.3115485543684759, -1.4912537673601527, 0.47094446223990083, 0.4437295473927825}, {-1.757356635428002, 0.1591843622813952, -0.9884220501422382, -0.5478121839318267, 1.3221989476115705, 1.1945345506177705, 0.5413374077537618, 1.9002603020806261, 1.6178976189333454, 0.36465016200801587, -1.3197171480472254, 1.1961869604273667, -0.9145582728757691, -1.7403265430757258, 1.270816245394927, -1.622962249745954}}, {{0.37673318879703727, 1.5801138405641582, 2.046517002950602, -0.386831023579458, -0.5322842614864387, 0.8096397433191945, -0.5107368727996233, 1.8693379583397387, -0.7966907053259075}, {-0.2655331548018861, -0.38526556735211054, -1.9330250322704978, -1.108319173643952, 1.0134408341564365, -1.032400513816819, 1.137930318021945, -0.3361257299046045, 0.06949424672464989}, {-1.4057327343145471, -1.3384597569255636, 1.580692854818523, -1.390358155182497, -0.13972908096403125, 1.6301700796972336, -0.6170375422782922, 1.1439475874111946, 0.35949162000860446}, {-0.2739753914061605, 0.9269937378332969, -0.8887832821077295, 1.8584327448464886, 1.6907362204956469, -0.07861198856159259, -1.2990837731106208, 1.5593506819870746, -0.5924212447354555}, {-1.5725699544750795, -0.1486387303962448, -1.5000832325011666, 1.292783109134575, -0.01174485319057749, 0.4330340935859586, -1.5671029309302762, -0.05639473291889704, 0.18827955761288695}, {0.9223072043282976, 0.4391341480489922, -0.005445955252464482, 1.618460572986672, 0.5669472718191779, 0.07075043339114134, 2.0306743307027717, -0.30575190770973104, -1.432699078310043}, {-1.7091252846218568, 0.7786536279912707, -0.23538396123885247, 0.5892365130632513, -1.9942460320480466, -1.972055110333511, -1.019457517333889, 0.6049041328741342, -2.0116695246508414}, {1.245891092159911, -2.094924458852369, -0.6070960252843075, 1.1707593313935911, 1.2765771174315534, 1.1464426252326305, 0.9647026266906151, -1.8346058819042794, 1.6285271152738834}, {0.891568339823051, -1.20540689668869, 0.7961786526033768, 1.7016207356069968, -1.546062382967988, -1.0229212592194774, -0.5314409407573966, 1.0237891624235111, 1.054377997343744}, {-0.7285923577203322, 1.7285933066795083, -1.6764092894598057, -2.1505592853589524, 0.15464969484504326, 0.43123077563773676, 1.7498125284504162, 2.2246191047402646, 1.095098929677267}, {1.8891679474094103, 1.0300697070256053, 1.5418885688269586, -0.6443021396807506, 1.2862956931041607, 0.8130777558313967, 0.11141469599004437, -1.0182932496469101, 1.923371898599227}, {1.079124855020707, 1.7723061487796832, 0.15011263303964545, -1.3512277740759706, -1.5752884738208195, -1.976937145561343, 1.7936843029642964, 0.7926382289979361, 0.4005809010885105}, {-0.4967209050168122, -1.4006528270020626, -0.1837438300469712, -1.3777014652821253, 1.2121505140228672, 0.3978215845056471, 1.1078164394720833, 0.6849042566004757, 1.5877317637301493}, {-1.5197681832178014, 1.213388035986699, 1.6131550393818508, 1.1046828451805135, -0.2154430268196112, -0.2598264251106049, -1.7897827325164388, 0.5761312052800319, -0.5943371587664114}, {0.6635601988220285, -1.6533199979063895, 1.344290437078341, 0.7720784381293425, -1.5855907887754552, -1.6919686535644827, 0.8378975634013366, 1.9945940090636893, -0.22757429210784916}, {-0.8002704902509119, -1.0396865035443335, 0.5726048331743302, 1.9869524772163711, -0.9231136146564245, -0.9069622270197726, 2.1350407024526357, 0.7162556066010901, -0.8927896298395782}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}}};/*weights_end*/
/*biases_start*/double[][] biases = {{0, 0, 0, 0, 0, 0, 0}, {0.02046898884177492, -1.924855472123563, 0.08068661015406352, -0.4314131615170989, 0.19853615211436992, -0.961140362206789, -1.1477826729904863, -1.199648305712784, 1.4505361112775073, -0.27480479200254887, 0.9265112227706219, 0.7270596685080586, 0.7111011562874142, -1.6641356288553153, -1.5797246268188132, 0.03412712554362079}, {-0.27810139053961597, -1.7583495073520923, 0.054626640601316556, 0.25363010380484663, 1.34826507945891, -1.6946441679018531, -0.6680373087139925, 1.1137597740237064, -1.3864005854269723, 0.44810461347777997, 0.5439754607906229, -0.24511704667283246, 0.8041730858874732, -1.6317896084197059, -0.4542878603721763, -1.2351152906889415}, {1.6945135259015716, -1.8745679305230738, 0.787418431179644, 1.5789705622432617, -0.2886425580256404, 0.07675222238623183, -1.4787475918187887, 1.7247247999102646, -0.42613402216306184}};/*biases_end*/

    void runFirstTurn() {
        communication.downloadAllyBase();
        communication.downloadMapBoundariesAndEnemyBase();

        if(weights.length != LAYER_SIZES.length)
            if(loggingOn) uc.println("ERROR 1");
        if(biases.length != LAYER_SIZES.length)
            if(loggingOn) uc.println("ERROR 2");
        for(int layer = 0; layer < LAYER_SIZES.length; layer++) {
            if(weights[layer].length != LAYER_SIZES[layer])
                if(loggingOn) uc.println("ERROR 3");
            if(biases[layer].length != LAYER_SIZES[layer])
                if(loggingOn) uc.println("ERROR 4");
        }
    }

    void run() {
        communication.downloadMapBoundariesAndEnemyBase();
        communication.lookForMapBoundaries();

        communication.addAllyAlive();

        UnitInfo nearestEnemyOrNeutral = getNearestEnemyOrNeutral();
        int[] inputData = getInputData(nearestEnemyOrNeutral);
        if(loggingOn) uc.println("inputData " + Arrays.toString(inputData));
        double[] outputs = forwardPropagate(inputData);
        if(loggingOn) uc.println("outputs " + Arrays.toString(outputs));
        Direction outputDirection = getDirectionFromOutputs(outputs);
        if(loggingOn) uc.println("outputDirection " + outputDirection);

        if(nearestEnemyOrNeutral != null) {
            if(loggingOn) uc.println("nearestEnemyOrNeutral " + nearestEnemyOrNeutral.getLocation());
            int damage = tryAttack(nearestEnemyOrNeutral.getLocation());
            if(damage != 0)
                communication.addScore(damage);
        }
        tryMove(outputDirection);
    }

    int[] getInputData(UnitInfo nearestEnemyOrNeutral) {
        Location selfLocation = uc.getLocation();
        int relativeAllyBaseX = selfLocation.x - communication.allyBaseLocation.x;
        int relativeAllyBaseY = selfLocation.y - communication.allyBaseLocation.y;
        int nearestEnemyOrNeutralExists = 0;
        int relativeNearestEnemyOrNeutralX = 0;
        int relativeNearestEnemyOrNeutralY = 0;
        int relativeNearestEnemyOrNeutralIsExplorer = 0;
        int relativeNearestEnemyOrNeutralIsMage = 0;
        if(nearestEnemyOrNeutral != null) {
            Location nearestEnemyOrNeutralLocation = nearestEnemyOrNeutral.getLocation();
            UnitType nearestEnemyOrNeutralType = nearestEnemyOrNeutral.getType();
            nearestEnemyOrNeutralExists = 1;
            relativeNearestEnemyOrNeutralX = selfLocation.x - nearestEnemyOrNeutralLocation.x;
            relativeNearestEnemyOrNeutralY = selfLocation.y - nearestEnemyOrNeutralLocation.y;
            if(nearestEnemyOrNeutralType == UnitType.EXPLORER)
                relativeNearestEnemyOrNeutralIsExplorer = 1;
            else if(nearestEnemyOrNeutralType == UnitType.MAGE)
                relativeNearestEnemyOrNeutralIsMage = 1;
        }
        int[] inputData = {relativeAllyBaseX, relativeAllyBaseY, nearestEnemyOrNeutralExists,
                relativeNearestEnemyOrNeutralX, relativeNearestEnemyOrNeutralY,
                relativeNearestEnemyOrNeutralIsExplorer, relativeNearestEnemyOrNeutralIsMage};
        return inputData;
    }

    double relu(double x) {
        if(x > 0)
            return x;
        return 0;
    }

    double sigmoid(double x) {
        return 1 / (1 + Math.exp(-x));
    }

    double[] forwardPropagate(int[] inputData) {
        double[][] activations = new double[LAYER_SIZES.length][];
        for(int layer = 1; layer < LAYER_SIZES.length; layer++) {
            activations[layer] = new double[LAYER_SIZES[layer]];
            for(int neuron = 0; neuron < activations[layer].length; neuron++) {
                activations[layer][neuron] = 0;
                if(layer == 1) {
                    for(int previousNeuron = 0; previousNeuron < inputData.length; previousNeuron++) {
                        activations[layer][neuron] += inputData[previousNeuron] * weights[layer - 1][previousNeuron][neuron];
                    }
                }
                else {
                    for(int previousNeuron = 0; previousNeuron < activations[layer - 1].length; previousNeuron++) {
                        activations[layer][neuron] += activations[layer - 1][previousNeuron] * weights[layer - 1][previousNeuron][neuron];
                    }
                }

                activations[layer][neuron] += biases[layer][neuron];

                if(layer == LAYER_SIZES.length - 1)
                    activations[layer][neuron] = sigmoid(activations[layer][neuron]);
                else
                    activations[layer][neuron] = relu(activations[layer][neuron]);
            }
        }

        int outputLayer = LAYER_SIZES.length - 1;
        double[] outputs = new double[LAYER_SIZES[outputLayer]];
        for(int neuron = 0; neuron < activations[outputLayer].length; neuron++) {
            outputs[neuron] = activations[outputLayer][neuron];
        }
        return outputs;
    }

    Direction getDirectionFromOutputs(double[] outputs) {
        double highestOutput = 0;
        int highestOutputIndex = 0;
        for(int i = 0; i < outputs.length; i++) {
            if(outputs[i] > highestOutput) {
                highestOutput = outputs[i];
                highestOutputIndex = i;
            }
        }
        return directions[highestOutputIndex];
    }
}