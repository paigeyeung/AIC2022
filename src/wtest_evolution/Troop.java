package wtest_evolution;

import aic2022.user.*;
import java.util.Arrays;

public class Troop extends AllyUnit {
    Troop(UnitController uc) {
        super(uc);
    }

    // 7 input -> 16 hidden -> 16 hidden -> 9 output
    final int[] LAYER_SIZES = {7, 16, 16, 9};
    // Weights are outgoing weights
/*weights_start*/double[][][] weights = {{{-1.094852290701498, -1.2779639815401551, 0.7465156086112454, -1.1375557454123668, -0.41706044696666655, -0.48286403625513685, -0.38483586457728824, -0.6520784784087095, 0.48803424161554343, -0.9683844779024642, -0.6430195341528351, 0.015612550537103864, 0.17482379276494697, -1.8241240951929716, -0.5681479679347703, -0.7248816832656244}, {-0.1551298968888828, 0.6152406647978692, -1.4245212247320134, 0.8251055968058933, -1.8977885584525276, -1.9280916078088572, 0.2981536568517198, 0.6292977952565644, -1.7034368021784196, 1.3235791683492328, 0.029904834602892727, 1.4481610903971087, -0.5888754193198955, 0.5679652647563724, 0.9641808371569307, -1.3865220481614862}, {-0.02630317682781147, -0.24492018809849014, 0.6732000760224386, 0.31205363566806454, -1.1646478926625217, -0.007580365011097268, 0.18484932683441935, 1.9159366240251625, -1.6340491174890421, -1.2777894532861445, -0.14177230332474178, 1.8362016144025133, 0.09567377340849736, -1.4565712613741715, 1.1546985389013296, 1.7063435625007997}, {1.9156160313205763, -1.7393515216963524, 0.6323831302749707, 0.2274256746913741, 0.4281853774611979, 1.2378563537077847, -0.09423713325178529, -1.4364281773183687, -1.1414970302486172, -0.16681495502189803, 1.57444314427002, 0.7282884982025402, 1.4526863203635374, 0.691717594793511, -1.1508227987111708, -0.2425850065781172}, {-0.1876375334464555, 1.8675140333154987, -1.4829079372528962, -0.07489451791890689, 0.46176513142948705, 0.15692408218743825, -0.38450358681506325, 0.7193917007863053, -1.1843054241681044, 0.29367595587296424, 0.09691349057217868, -1.4465328103792605, -1.230733886714352, -1.5918019908353331, 0.10941907171844223, -0.6647031490439059}, {0.5697981768721281, 1.3321271287698107, -1.9121445187724984, 1.7868125646313087, -0.6210436392541916, -0.7552663378515372, 0.47054519567125297, -0.7030313667013326, -1.606771032167074, -0.24265810419442557, 0.3607879989639935, -0.8139776871798965, 1.3183668632553243, -1.0722622965081934, -1.9858403349613276, -1.2479883357278858}, {-0.5763060772477822, 1.790051476083824, -1.0971250653763387, 1.8856209327568445, 0.27652630586213567, -1.548392994004164, 0.4313506234154594, -0.2183888721611429, -1.5253221104848973, -1.5937673156810668, 0.5407362674289153, 1.9925276115909147, -1.0919204856575813, 0.7032831489019147, 1.4527694449099688, -0.5837999752331502}}, {{0.09881307673405182, -0.3156347478211847, 0.45919162803396896, 1.0299655259239193, 1.2671639138043473, 1.5648735893094532, 0.01761111483593636, -1.6599460916651085, 0.4917920788206458, 1.5248357594409394, 0.6560982093716725, -1.3999289132850694, 1.7113379461122182, -0.5945180492316755, -0.1887365450794456, -1.6359231639670946}, {-0.9417855210603481, -0.5457195416854823, 0.342891540400708, -1.7486281076143984, -0.17856180808282174, -0.5418329705105962, -0.3844794003304468, 1.810453904506688, 0.6119134064617526, 1.229520682566247, -0.4501105280613893, 1.6952155818171, 1.159503287162618, -1.0401042969600924, -0.34985661712009897, -1.1929636936129535}, {-1.2876144771169291, 0.27790562102682825, 1.375589678823633, 1.69310302369255, -1.3629281465590921, -1.5352765551081728, -1.5656060451533227, -1.6360109569817332, -1.3540382743247048, 1.7232729676423078, 0.8753033797083685, -1.4575948645941978, 0.8343713034341422, 0.5425319127494936, 0.4094509316570183, -0.6255407527445631}, {1.161575035756567, -0.9673229081951957, 0.9527927368958293, -1.6541701966440074, 0.2503721369684815, -1.6680913030122446, -1.6461016104765678, -0.23363027290921679, 1.1851748632577928, 0.01952691933134343, 1.8453110678045803, -0.11413818756907101, -1.6528324685530542, -1.7675481698304991, 1.4644663638947066, -0.40458952646418656}, {0.7783543419394903, -1.0790547035147249, -1.6026009838122577, 1.6275117819903833, -1.3181013231445395, -0.473025280249487, -0.2084266646815638, -0.3417665421994478, -1.182850943920839, -1.6360299909585665, -1.2279109857217403, 1.905560001001645, 0.7085034799282806, -1.1575349140822224, 0.9522568421817397, 1.3720943511836738}, {-1.874943753314422, -0.5286115179827466, -1.385115839061069, 0.9218070672538388, 0.7466844172512532, -1.145597537122364, -1.0948404237601008, 1.2107690701466907, 0.8224544895525274, -0.9977253051412309, -0.26691761285760185, 0.4548426062000761, -0.5661674289659602, 1.0172296186376757, -0.3599535430517973, 0.8543299019374135}, {0.5513145609735255, -0.0482850544980451, -1.9318809800344399, 0.015932194921961074, -0.14222222642519045, -0.5739824134265339, -1.6232593719587296, 1.5699657171674168, -1.7559433446312402, 1.508201806653421, -0.8336059069813144, -0.2703344463666939, -0.22157764131635638, -1.3790066283796665, 0.06267422378364884, 0.01081159844598778}, {-0.7905621013488089, 1.25890866607073, 0.8121368695962503, -1.238577777784772, -1.5021970122427004, -0.4266478950319468, -1.5799464000061008, 1.4283818057149151, -1.898585902655086, 1.489003072241926, 0.03533816064766926, 1.1171993856256641, -1.016151204443529, -0.3935509397082191, 0.5717076962104772, -1.4006723320583854}, {-1.0202122914336105, 1.3527197610374997, -0.4464704564206774, -0.9570985526930902, 0.5499045976449435, 1.1767572199792058, 0.6112932964452575, -1.524263660277097, -1.3588807959378828, -1.6682997322500634, 1.065855720283301, -1.9082789563317708, -0.4152825223429941, 0.5235052128337268, -0.951053452516716, -1.3634448747620818}, {-0.3921292443808744, -1.2251325894372762, -1.5171057396358223, -1.3113737203035303, 1.2381999049609562, 0.8530137176120247, -1.3352355929852529, 1.294066942158905, -0.29204216037417075, 1.3001493240443112, 1.033020563777895, 0.5647318051175723, 0.338311235339253, -0.19151655243499022, 1.538113237527603, 1.6899716106814542}, {-1.570394831073739, -1.0591713406076768, -0.5278881295788764, -1.8395624487839797, -1.3851085169367212, -0.2911906742179555, -1.7646374039807293, -0.7193951358082402, -0.7903069835142946, -0.23256032735429022, 1.465698232414578, -1.7847857545319439, 0.6540922993060603, 0.9654460538203486, -1.4303120169918828, -0.7614208472870914}, {1.9636561709040636, -1.4869472886905624, 0.6686080535207717, -0.05864835024184467, 0.49225648105282405, 1.1028215685745755, -1.2403369775686826, 1.9308127096289338, -0.5838221212402548, 0.3797866636919842, 0.7013464168981636, 1.2783397646418733, 0.2420316889363998, -1.38396708597649, 1.3832297340449156, 1.403620131322397}, {-0.592389305162905, -0.9920996008766805, -0.7187820795800071, 0.09861535038833269, -0.3444609651657258, 1.4373975544561142, 0.09859645315166654, 0.3645925904571081, 0.1558841812968894, 0.8705748709924537, 1.6624023052925039, -0.10798026780128067, -1.2449976394422797, 0.7033114069069826, 1.7797294992060286, 0.6468480815634692}, {0.3320443995657594, -1.1905189630012778, -1.8596909506528703, -0.3577733714523945, -0.9575633057781086, -0.44217761767204866, 1.0964135231135677, -0.10269655305907754, -1.993498477334553, 1.757838018412023, -0.12627277658515057, 0.3530017000477099, 1.4782073809570524, -1.9135981900015717, 0.3709848221703709, 1.206152389174687}, {1.388903846913259, -0.5894296015207381, 1.415040705072558, -0.9916681233669276, -0.6806403764300248, -1.7432033830024811, -1.2971603359413488, -1.9564790040368267, -0.2908669199591092, -0.7466960312981561, 1.7774806354805612, -1.5741629575066427, 0.161203418738725, 0.5595866162106753, 1.1159197347188874, 0.8724189442146564}, {1.7460942089941138, -0.010307477984169644, 0.6082567679624051, 1.2551808051104478, -0.1263184407701714, 1.5809947549788173, -0.1527819373480659, 1.3705270408356869, 0.5006755988107585, -0.016018909250258506, 1.8042315151332864, 1.490660127863602, 1.9996912157331632, -0.980771657547804, 1.2591595462631915, -0.6984836077824399}}, {{0.6533030681484027, 0.36755451545350537, 1.8009999052704457, -0.08401703508632918, -1.1200118131459549, 1.8705885493381125, -0.11762858731921089, -0.2941161230046556, -0.8610060891354325}, {-1.700037841129288, 1.433842447510167, -0.9078867949224998, -1.9026778069866959, -0.6250936164619372, -0.9589900658539969, 1.375349116677782, 1.6846345865440489, -1.1848760949654973}, {-1.2040743776591953, 1.0286883869786987, -0.24320587141723404, 1.5741891191448487, -1.3540861490225753, 1.415606661778261, -0.363339798069219, 0.1458341877190037, -0.9399756841464035}, {-1.9189852789837691, 0.32230266001530516, 1.159767655841371, -0.35494163190333117, -1.6777701326718661, -1.8154168439283245, -1.8477788687545056, -1.1464201178240847, 1.9975441973049701}, {-0.8244345392074637, -1.3892816130962768, 0.41581535436011663, 0.020103843632203855, 0.9320384013019658, 1.633331077470964, 0.7571531905618345, -1.936966879350658, 0.8211241805639515}, {0.8032106134517445, 0.31939821664864665, -1.3451995283413964, 1.9488485699242495, 0.7723709796427003, -0.9199367864066188, -1.904837584698694, 0.4382886929320575, -1.7708241759492713}, {-1.114500285645836, 0.34718809421277363, -1.7721929059923252, 0.7884824354858648, -0.6932588649459968, -1.973514664534593, -0.5500069615028504, 0.4658876276492441, -0.3045551227530776}, {1.3214202165272955, 0.45324989666895643, 0.30527412194274417, 1.0246817222605156, 0.4101348021319846, -0.7189447186694604, 0.6701320542743403, -1.5572613737506589, 1.9316398781023865}, {-0.6239213666074934, -0.5509973404211523, 0.9465685602391947, -1.395188685602879, 0.5654291962556051, -0.9842442530479114, 0.8026210637493643, -0.35964927285905457, 1.642767035369285}, {-1.9241223155767955, 1.1568820508483544, -1.7696126660871294, -1.770839587916913, 1.0641086005178075, 0.06096897951336011, 1.9443660318330602, -1.7163386047329925, -0.418871780524948}, {-0.7794113551388393, -1.1314414519555087, -0.32632971009790923, -1.3924721933020026, -1.1397249149345918, -0.7663328773769291, -1.5212569763944401, -0.6514182712419543, 1.1132897790245133}, {0.0795469580203787, -1.7571532190922592, 0.5848069655045163, 0.2981199968846737, -1.9210141391833897, -1.043476388917671, 1.130970156086224, 1.0988579636388343, 0.5680885342037048}, {-0.1531069977860331, 0.23095772323037522, -1.721499146163433, 1.5619177027054576, 0.7539013461325879, -1.4989496136620688, 1.8879186429687373, 1.465018255416826, 1.1306370702770883}, {-0.6132757882913875, 1.6389720613295298, 1.2313727104090102, 0.3361435743442698, -0.2537328588199763, -1.6211918664411038, -1.4622392111346003, 1.3941809798251392, 0.07019308233997013}, {1.0884267778410703, 0.1832026291004718, -1.0548021729053385, 1.8882337825830335, -0.3027366571059571, -0.6272835519763102, -1.508614522841624, 0.10769363737598825, 1.9335209829246747}, {0.40181920050083075, -0.05050441293016794, -0.7962800381719886, -0.6870888509731281, -1.2764121760949783, 1.3257709326895215, 0.36346184952316607, 1.4394512955817995, -1.4467975004414515}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}}};/*weights_end*/
/*biases_start*/double[][] biases = {{0, 0, 0, 0, 0, 0, 0}, {0.12543178267554556, -1.3676460087030913, -0.12004760134796166, -0.04879211629244917, 0.6784673403445147, -1.1138412438564758, 1.824227974622942, 0.304696384907873, -1.4878256745969538, 0.6642525358099118, 0.6965562953656597, 1.4479198327728322, 1.7059228006047524, -0.562411522491892, 0.0347112568024035, -1.4114027116722383}, {1.5229377426165156, 0.8788929162275299, -0.601892278477397, 0.5593851413296393, 1.0810614789467952, 1.0509683253239204, -0.24199212590100672, -1.6558972520219606, 1.8567540603857586, 0.875812025273861, -1.5491816825878386, -1.087748733558536, 0.031760234951947464, 0.3119387380812757, -0.8207614355193269, -1.5319876673416326}, {1.3715025332748176, -1.3028742989592557, -1.7092280295022078, 0.25537269629168957, 1.5586988324101112, 0.4598427121703459, -1.3145704036012296, 0.2518975633044125, 1.768092586037417}};/*biases_end*/

    void runFirstTurn() {
        communication.downloadAllyBase();
        communication.downloadMapBoundariesAndEnemyBase();

        if(weights.length != LAYER_SIZES.length)
            if(loggingOn) uc.println("ERROR 1");
        if(biases.length != LAYER_SIZES.length)
            if(loggingOn) uc.println("ERROR 2");
        for(int layer = 0; layer < LAYER_SIZES.length; layer++) {
            if(weights[layer].length != LAYER_SIZES[layer])
                if(loggingOn) uc.println("ERROR 3");
            if(biases[layer].length != LAYER_SIZES[layer])
                if(loggingOn) uc.println("ERROR 4");
        }
    }

    void run() {
        communication.downloadMapBoundariesAndEnemyBase();
        communication.lookForMapBoundaries();

        communication.addAllyAlive();

        UnitInfo nearestEnemyOrNeutral = getNearestEnemyOrNeutral();
        int[] inputData = getInputData(nearestEnemyOrNeutral);
        if(loggingOn) uc.println("inputData " + Arrays.toString(inputData));
        double[] outputs = forwardPropagate(inputData);
        if(loggingOn) uc.println("outputs " + Arrays.toString(outputs));
        Direction outputDirection = getDirectionFromOutputs(outputs);
        if(loggingOn) uc.println("outputDirection " + outputDirection);

        if(nearestEnemyOrNeutral != null) {
            if(loggingOn) uc.println("nearestEnemyOrNeutral " + nearestEnemyOrNeutral.getLocation());
            int damage = tryAttack(nearestEnemyOrNeutral.getLocation());
            if(damage != 0)
                communication.addScore(damage);
        }
        tryMove(outputDirection);
    }

    int[] getInputData(UnitInfo nearestEnemyOrNeutral) {
        Location selfLocation = uc.getLocation();
        int relativeAllyBaseX = selfLocation.x - communication.allyBaseLocation.x;
        int relativeAllyBaseY = selfLocation.y - communication.allyBaseLocation.y;
        int nearestEnemyOrNeutralExists = 0;
        int relativeNearestEnemyOrNeutralX = 0;
        int relativeNearestEnemyOrNeutralY = 0;
        int relativeNearestEnemyOrNeutralIsExplorer = 0;
        int relativeNearestEnemyOrNeutralIsMage = 0;
        if(nearestEnemyOrNeutral != null) {
            Location nearestEnemyOrNeutralLocation = nearestEnemyOrNeutral.getLocation();
            UnitType nearestEnemyOrNeutralType = nearestEnemyOrNeutral.getType();
            nearestEnemyOrNeutralExists = 1;
            relativeNearestEnemyOrNeutralX = selfLocation.x - nearestEnemyOrNeutralLocation.x;
            relativeNearestEnemyOrNeutralY = selfLocation.y - nearestEnemyOrNeutralLocation.y;
            if(nearestEnemyOrNeutralType == UnitType.EXPLORER)
                relativeNearestEnemyOrNeutralIsExplorer = 1;
            else if(nearestEnemyOrNeutralType == UnitType.MAGE)
                relativeNearestEnemyOrNeutralIsMage = 1;
        }
        int[] inputData = {relativeAllyBaseX, relativeAllyBaseY, nearestEnemyOrNeutralExists,
                relativeNearestEnemyOrNeutralX, relativeNearestEnemyOrNeutralY,
                relativeNearestEnemyOrNeutralIsExplorer, relativeNearestEnemyOrNeutralIsMage};
        return inputData;
    }

    double relu(double x) {
        if(x > 0)
            return x;
        return 0;
    }

    double sigmoid(double x) {
        return 1 / (1 + Math.exp(-x));
    }

    double[] forwardPropagate(int[] inputData) {
        double[][] activations = new double[LAYER_SIZES.length][];
        for(int layer = 1; layer < LAYER_SIZES.length; layer++) {
            activations[layer] = new double[LAYER_SIZES[layer]];
            for(int neuron = 0; neuron < activations[layer].length; neuron++) {
                activations[layer][neuron] = 0;
                if(layer == 1) {
                    for(int previousNeuron = 0; previousNeuron < inputData.length; previousNeuron++) {
                        activations[layer][neuron] += inputData[previousNeuron] * weights[layer - 1][previousNeuron][neuron];
                    }
                }
                else {
                    for(int previousNeuron = 0; previousNeuron < activations[layer - 1].length; previousNeuron++) {
                        activations[layer][neuron] += activations[layer - 1][previousNeuron] * weights[layer - 1][previousNeuron][neuron];
                    }
                }

                activations[layer][neuron] += biases[layer][neuron];

                if(layer == LAYER_SIZES.length - 1)
                    activations[layer][neuron] = sigmoid(activations[layer][neuron]);
                else
                    activations[layer][neuron] = relu(activations[layer][neuron]);
            }
        }

        int outputLayer = LAYER_SIZES.length - 1;
        double[] outputs = new double[LAYER_SIZES[outputLayer]];
        for(int neuron = 0; neuron < activations[outputLayer].length; neuron++) {
            outputs[neuron] = activations[outputLayer][neuron];
        }
        return outputs;
    }

    Direction getDirectionFromOutputs(double[] outputs) {
        double highestOutput = 0;
        int highestOutputIndex = 0;
        for(int i = 0; i < outputs.length; i++) {
            if(outputs[i] > highestOutput) {
                highestOutput = outputs[i];
                highestOutputIndex = i;
            }
        }
        return directions[highestOutputIndex];
    }
}