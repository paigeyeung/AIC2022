package wtest_evolution;

import aic2022.user.*;
import java.util.Arrays;

public class Troop extends AllyUnit {
    Troop(UnitController uc) {
        super(uc);
    }

    // 7 input -> 16 hidden -> 16 hidden -> 9 output
    final int[] LAYER_SIZES = {7, 16, 16, 9};
    // Weights are outgoing weights
/*weights_start*/double[][][] weights = {{{0.30672125770366154, -1.6752792046438918, 0.0484962159086062, 1.6496842157479543, -0.6490042743269351, -1.3147888253659383, -0.9669336225966454, -0.6619907458009657, -1.1077084359281968, 1.0867631476530724, -1.6201165598325393, -1.907420417587983, 1.769751153371819, -0.6851793436795983, -1.1813517371051785, -1.8951096151112865}, {0.05455087309325135, -1.4351265456108941, -1.8890253443416976, 1.476828993372171, 0.39231878910489204, 1.5781387445600012, 1.1726613862027797, -1.4372411600510446, 0.7510967594898235, 0.7437786906559785, -1.9807948961057247, -0.8533133429711839, 0.3807288973788494, -1.8190715870090002, -0.5079942923358054, -0.9057761307338441}, {-0.0075251047555768835, -1.109385075569946, 1.222183137340469, 1.4063357428009007, 0.8155976112785872, -1.9901280961748844, 0.2083312336346621, 1.0312462021998812, -1.406521800312548, -0.08651275046413476, 0.5786367063792834, -0.39392959321203547, -1.140387554944029, -0.5517754241709518, 0.8990478060889795, 0.5049464795367018}, {-0.23901109705131773, -1.1437975126048734, -0.760850803874741, 1.7140160816298242, 1.898744996897587, 0.8851184742394453, -1.3029176589714657, -1.6090329765003726, 1.235349511104101, -0.19716044211973038, 0.2566063069357578, 0.0018126308400194802, 0.7482113044193768, -1.2108837725161368, -1.7517050719794498, -1.2603388872951817}, {1.0053485093907395, -1.3037147283659443, 1.7485909003801048, 1.8562007719157916, -0.9972519364768395, 0.03752811070086981, 1.853562804906559, -1.6484746586736598, -0.5885646270128269, 0.07109484423943657, -0.9557963750818641, -1.709434733345148, 0.5606686373900343, -1.577291668084614, -1.0484902643952108, 0.019648845351375233}, {1.8448552214650866, 0.9181374517520697, -0.13403938570593166, -0.30143098613385444, 0.6192572079918559, -1.4379977303410119, 1.7941026104225934, 0.7942060023091497, 1.8364712035028439, -1.7902903041576548, -0.41907424432696283, -1.2305301028538862, 0.8226040913477677, -0.47769615839005475, -1.5367481705094148, 0.6489499406547101}, {0.39880878364791217, 1.3672657517737727, -0.5671188079311098, 1.2259233895320132, 0.7851503709103813, -0.8403059283846313, -0.0723575762156683, 0.9848190876737273, -0.9151150839037232, 1.023192972061552, 1.7918915129004618, -0.5068627189501287, 0.1040907378809588, 0.3381518074110361, 1.965233304003235, -1.7208121309043372}}, {{1.1504647599266185, 1.2627260424588358, -1.890295976262502, 1.245448848762711, 1.1645274427713574, -0.0743400911677492, 1.882097269082644, -1.8467954760982752, -1.6155679019954001, 1.2528004754086313, 0.30699153669741763, 1.0527617617868574, -0.19832285417873408, 1.8174239665773926, 0.22549409558235434, 0.3426684576259036}, {0.25828921344798594, 1.7825840116587477, -1.6987555784834316, -0.11051517923092113, -1.4219215742027957, 1.3549474933470478, -1.6043346492990254, -1.4093727999290735, 0.5445548610975268, -0.48624525352641124, 1.809679371838726, 0.5186830755721448, 1.4304482894841053, 1.9681394017934877, -1.583035673781949, 0.8429694959519516}, {-0.03730864372104348, -1.114919969644276, -1.6811977935898588, -0.14878535679978633, 1.1946185905945579, -0.2862105244814863, 1.4418286254207864, 1.4834608888650895, 0.8869902941986303, 1.614680207020284, -0.43625283071534193, -1.1324465217282143, -1.3415043408672362, 0.6892407116142683, -0.10801433619803769, 1.1700719972810596}, {-1.4552894393372995, 0.6805382819165331, 0.29377589751994115, -0.06375084423992305, -1.9443437478566588, -0.8469272198362212, -0.3957075614854433, -0.40203069216931375, 0.8698127384544572, 1.470225923890096, -0.002568487276618736, 1.9344368632469657, -1.5943171903124722, 1.9507087776112706, -1.8427853079303724, 0.6187849189707988}, {0.9876223643683661, -0.01161066022412749, 1.1898441996994906, 1.3634089762933934, 0.45956306776090816, -0.9539990818123707, 1.6949856685036377, -0.5503362158620768, -1.468701529513122, 1.89754961921351, 1.4997680249763303, 1.3430500160909316, 0.3486061330672743, 1.644031049525617, 1.1475061492284317, 0.8580813210489953}, {0.8930199513243271, 1.7437215457194588, -1.0677169796803647, 0.001263965996324501, -1.8304926380028923, -0.38117703020779103, 1.3367861749017917, -1.4939802124568886, 1.5488133042254901, -0.321592323485977, -1.155966873385469, 1.0646633620810162, -0.5949230826870906, -0.3260570722757805, 1.3189983403977363, 0.9926531800320473}, {-1.449849589782258, 0.04178689334041463, 1.5851000295640905, -1.5948510848203603, 0.32137136108323716, 1.8474522683795112, -0.11865706454178326, 1.686386417190517, -1.9333416279279008, 1.652301303290324, 0.19005750596160764, -1.3344080325064631, 0.6870254485943996, -0.3255117291098135, 0.4374450578924174, 1.4535139854836547}, {-1.1200629074550057, -0.2883499394859377, -0.7178862983680658, 0.5137795952679025, 0.07145437325379689, -1.6110021350440857, -1.0714788147425787, 0.8775080125835584, -0.664520367933076, -1.827534917219809, -0.017815333712982717, 1.9397643457885412, -0.9781995277532478, -0.5237878456560794, -0.5647372854650965, -1.724297349480791}, {-1.9496332725793688, -1.6059863741628932, -0.40495539931852154, 0.7030007856116711, -0.1303874014098123, -1.6247388050500589, 1.841956820855661, 0.0415749230171123, -0.5049497240394967, -0.6689276773393207, -1.3080068019084856, -1.9510862654764494, 0.5273498067002675, 0.9631943804281238, -1.5292136219279824, 1.835799098867994}, {0.4221352887273402, -1.845069429352138, -1.8228311432998598, 1.07255593387822, 1.403227809626372, -0.7455357831307978, -1.3980247033097206, -0.0005285809920785312, -1.287287911976959, -1.7899895608132277, -0.20496368921110308, -0.6431228387580799, -0.8617301267269717, -0.34856922634155163, 1.8944053513740422, -1.9843038253378675}, {0.9173345540604783, -1.0555604908885154, 1.075168656112734, -0.48587662675997345, -0.052241976493379916, -0.11144894687926143, 0.6841286388053551, -0.356449659486743, -1.252318653643247, 1.0659923740155217, -1.2571808524017065, 1.4098409852057796, -1.860320100339877, 0.8660132241765761, -0.3591033593832207, 0.6527589481694451}, {1.9980349819462448, 1.2050319864536618, -0.1782101968342742, 1.5916480434702462, 1.9139048791617261, 1.129092565227972, -0.8499024645122506, -0.2538852773121394, -1.1901640840964571, -1.0270681929089238, 0.10490781573795971, 0.3532965946328952, 1.393190405131734, -1.2752578309020457, -0.4573141611354248, -1.0029797064612334}, {-1.2945839867731745, 0.47551638701815735, 0.31607446739077094, -0.6469134132490746, 0.08047133128563733, -0.8618638674054591, 0.12604033544678073, -0.3072675733799346, -1.1604439800823148, 0.7822518485673475, 1.0517708999961664, 0.6927659609707075, -1.911971642809565, 0.30674910690769996, 1.5495608972729062, -1.603942727061256}, {0.26900999541086534, 1.6882626763711004, 0.31048191214519205, -0.8867001755413142, 0.8135315143002866, 1.0491906336638888, 0.37852135346273474, 0.817615957491785, -1.7540624324801146, 0.30859102770406643, 1.6653563951225387, 0.8491257766235298, 0.6976961646215547, 1.8473685964625992, 0.944778685256928, -0.6415306647194976}, {0.30084351498055817, -1.4421290242518627, 1.3136807146319254, -0.7031915849984434, 1.776460187362828, 0.8150063217017895, -0.8393893214450667, 1.3651860169709615, 1.1023833624247845, 1.998597367576774, -1.2318329093292713, -1.3488235596550369, -1.6890130255853495, 1.6654821619149063, 0.37978382590852977, 0.5110304076223104}, {1.9034985095572665, 1.3867823822599763, 0.9693065460294763, -1.7443592359491698, -1.9744870418464706, 1.1036840093142941, -0.458850832371565, 1.7501068586505326, -1.141002706045997, 1.7832321548647343, -1.4278120713380291, 1.8145437505897437, 0.7632526236971042, -0.9278525967445734, -1.3918724855526357, -0.7702678070110189}}, {{1.0225240533890987, -0.9338849003996295, -0.9816062048008969, -1.2657543869213215, -0.46516917647028233, 0.9833173819643717, 1.8464619188569045, 1.1467297978044875, -0.18348327513736518}, {0.7018548146040828, -1.1362211124366715, -1.450180190591404, -0.8223168700395562, -0.8830402223470437, 1.4888274409896463, -1.147647256135401, 0.4672524761397927, -1.64042094388024}, {-1.8696316562267117, 0.7804987913838728, -0.8294731186564732, -0.9357185122625498, 1.9773622774853932, -1.588802981940208, -1.0290126756939535, 1.9767211115082954, 1.8321638065771255}, {-1.7914532259552214, -1.2045623693248135, -0.8961284908016784, 1.859967629945729, 0.4253511327321453, -0.2440932899664987, -0.9793578502507945, 0.7943383432719351, 0.9365193236748284}, {1.7316851705152767, 1.124693933526674, -1.4641403130019994, 1.1260405309264665, 1.8143851935953164, -0.4191641139103841, 1.53022888607412, 0.3051059532950866, 0.8296420072015813}, {-0.04187878132197165, -1.4775029423307697, 0.953089161561353, 0.6216171947339757, 1.827849331094066, -1.3003003073600765, 0.41456089041343924, -1.3792549520312645, -0.22700976086235736}, {-1.272929297525497, -1.7596162342631403, -0.7607160591710151, -1.1941501396933294, 1.821273062249848, -1.6263624346979144, 0.8672672761298701, -1.5007498872162688, -1.6179940174616512}, {-1.5596620728219626, -1.8004479593078244, 0.9221418433990904, -1.919039173640436, 1.912186856444288, 1.5323604538533155, -0.008046065231372523, -0.23045760012417338, 0.4764656454930791}, {1.1808947793649902, 1.0277763042697674, 1.8354147938302945, -0.7443804871205266, -0.8241244643771668, -1.878568355917401, -0.29028233724090313, 0.9019943125010257, -1.0268395189891453}, {0.8689140053663511, -1.307560063178272, 0.9377632383596155, 1.939343069539294, 1.2967469904978097, 0.7286061017754051, -1.4981275897704358, -0.5721505265161309, -0.9472175610194906}, {0.8320654649995061, 1.1363977663053833, -1.4213381490171964, -1.5109637554131634, 1.414904038154305, -1.6336829095572782, 0.2683488842431685, -1.0693366131122355, -0.5009219492644772}, {0.17129314049531397, 1.3356672092523847, 1.700624861022077, 0.11737650671588673, -0.009087234272986855, -0.752989028548217, -1.0589881042838987, -1.8563348861674949, -0.07672778370255307}, {1.975692401612024, -0.6315487107775812, 1.9739433827423492, -0.12158139308794613, -0.3617210061345122, 1.841750656745873, 0.2775275082980926, 0.807901136797534, 1.8243898300234118}, {1.7388487787050244, 0.633796696555299, -0.7935233379518234, -1.8394727145078367, 1.6339299504859648, -0.5403249217080033, -1.46401832891193, -1.8771142530683118, 0.17332961896557375}, {1.176198403571855, 1.9853545539467214, -1.3745327063894295, -0.13584887205318408, 0.5770415681901446, -1.3681315130501122, 0.6798357569053488, 1.7395730310659836, -1.8334150047395905}, {0.9907082331587667, 1.394138912748069, -1.213034005555993, 1.714181413077048, 0.4293188283705036, 1.4937704696951752, 1.2688826301533713, -1.510235714305319, -1.9527401472811259}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}}};/*weights_end*/
/*biases_start*/double[][] biases = {{0, 0, 0, 0, 0, 0, 0}, {-0.25767255138211187, -0.23939381085005085, -0.8012018451760943, 0.21285735448164278, 0.9561075649542885, 1.9236361427691686, -0.6900586707437624, -0.9570073667162724, 1.875444002729409, 1.9469219580887596, -0.6727476300365769, -1.325973475243729, -0.786702165719273, -0.7081115176816359, -0.5886714216941549, -0.24657459373457602}, {1.7442063123559395, 1.6247732475507788, -1.0159749937790967, -1.8310123155316975, -1.8355198727539292, -0.9701162846147318, -1.042008745999572, 0.9976873861134075, -0.34462205164582826, -1.8634981533021713, -1.7084469172706722, -0.49693724569491327, -0.07653016761909504, -1.2762604136495797, 0.34979118825706523, 1.6773988339655777}, {-1.6749946569187353, 0.11650885473785655, 0.07571089926752839, -0.7759962218121723, 0.8868550525603043, 1.1924687275079755, 1.310896145772566, 1.1116208498652074, 0.45443939434185765}};/*biases_end*/

    void runFirstTurn() {
        communication.downloadAllyBase();
        communication.downloadMapBoundariesAndEnemyBase();

        if(weights.length != LAYER_SIZES.length)
            uc.println("ERROR 1");
        if(biases.length != LAYER_SIZES.length)
            uc.println("ERROR 2");
        for(int layer = 0; layer < LAYER_SIZES.length; layer++) {
            if(weights[layer].length != LAYER_SIZES[layer])
                uc.println("ERROR 3");
            if(biases[layer].length != LAYER_SIZES[layer])
                uc.println("ERROR 4");
        }
    }

    void run() {
        communication.downloadMapBoundariesAndEnemyBase();
        communication.lookForMapBoundaries();

        UnitInfo nearestEnemyOrNeutral = getNearestEnemyOrNeutral();
        int[] inputData = getInputData(nearestEnemyOrNeutral);
        uc.println("inputData " + Arrays.toString(inputData));
        double[] outputs = forwardPropagate(inputData);
        uc.println("outputs " + Arrays.toString(outputs));
        Direction outputDirection = getDirectionFromOutputs(outputs);
        uc.println("outputDirection " + outputDirection);

        if(nearestEnemyOrNeutral != null) {
            uc.println("nearestEnemyOrNeutral " + nearestEnemyOrNeutral.getLocation());
            int damage = tryAttack(nearestEnemyOrNeutral.getLocation());
            communication.addScore(damage);
        }
        tryMove(outputDirection);
    }

    int[] getInputData(UnitInfo nearestEnemyOrNeutral) {
        Location selfLocation = uc.getLocation();
        int relativeAllyBaseX = selfLocation.x - communication.allyBaseLocation.x;
        int relativeAllyBaseY = selfLocation.y - communication.allyBaseLocation.y;
        int nearestEnemyOrNeutralExists = 0;
        int relativeNearestEnemyOrNeutralX = 0;
        int relativeNearestEnemyOrNeutralY = 0;
        int relativeNearestEnemyOrNeutralIsExplorer = 0;
        int relativeNearestEnemyOrNeutralIsMage = 0;
        if(nearestEnemyOrNeutral != null) {
            Location nearestEnemyOrNeutralLocation = nearestEnemyOrNeutral.getLocation();
            UnitType nearestEnemyOrNeutralType = nearestEnemyOrNeutral.getType();
            nearestEnemyOrNeutralExists = 1;
            relativeNearestEnemyOrNeutralX = selfLocation.x - nearestEnemyOrNeutralLocation.x;
            relativeNearestEnemyOrNeutralY = selfLocation.y - nearestEnemyOrNeutralLocation.y;
            if(nearestEnemyOrNeutralType == UnitType.EXPLORER)
                relativeNearestEnemyOrNeutralIsExplorer = 1;
            else if(nearestEnemyOrNeutralType == UnitType.MAGE)
                relativeNearestEnemyOrNeutralIsMage = 1;
        }
        int[] inputData = {relativeAllyBaseX, relativeAllyBaseY, nearestEnemyOrNeutralExists,
                relativeNearestEnemyOrNeutralX, relativeNearestEnemyOrNeutralY,
                relativeNearestEnemyOrNeutralIsExplorer, relativeNearestEnemyOrNeutralIsMage};
        return inputData;
    }

    double relu(double x) {
        if(x > 0)
            return x;
        return 0;
    }

    double sigmoid(double x) {
        return 1 / (1 + Math.exp(-x));
    }

    double[] forwardPropagate(int[] inputData) {
        double[][] activations = new double[LAYER_SIZES.length][];
        for(int layer = 1; layer < LAYER_SIZES.length; layer++) {
            activations[layer] = new double[LAYER_SIZES[layer]];
            for(int neuron = 0; neuron < activations[layer].length; neuron++) {
                activations[layer][neuron] = 0;
                if(layer == 1) {
                    for(int previousNeuron = 0; previousNeuron < inputData.length; previousNeuron++) {
                        activations[layer][neuron] += inputData[previousNeuron] * weights[layer - 1][previousNeuron][neuron];
                    }
                }
                else {
                    for(int previousNeuron = 0; previousNeuron < activations[layer - 1].length; previousNeuron++) {
                        activations[layer][neuron] += activations[layer - 1][previousNeuron] * weights[layer - 1][previousNeuron][neuron];
                    }
                }

                activations[layer][neuron] += biases[layer][neuron];

                if(layer == LAYER_SIZES.length - 1)
                    activations[layer][neuron] = sigmoid(activations[layer][neuron]);
                else
                    activations[layer][neuron] = relu(activations[layer][neuron]);
            }
        }

        int outputLayer = LAYER_SIZES.length - 1;
        double[] outputs = new double[LAYER_SIZES[outputLayer]];
        for(int neuron = 0; neuron < activations[outputLayer].length; neuron++) {
            outputs[neuron] = activations[outputLayer][neuron];
        }
        return outputs;
    }

    Direction getDirectionFromOutputs(double[] outputs) {
        double highestOutput = 0;
        int highestOutputIndex = 0;
        for(int i = 0; i < outputs.length; i++) {
            if(outputs[i] > highestOutput) {
                highestOutput = outputs[i];
                highestOutputIndex = i;
            }
        }
        return directions[highestOutputIndex];
    }
}