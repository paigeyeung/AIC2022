package wtest_evolution;

import aic2022.user.*;
import java.util.Arrays;

public class Troop extends AllyUnit {
    Troop(UnitController uc) {
        super(uc);
    }

    // 7 input -> 16 hidden -> 16 hidden -> 9 output
    final int[] LAYER_SIZES = {7, 16, 16, 9};
    // Weights are outgoing weights
/*weights_start*/double[][][] weights = {{{-1.4477734653919925, 0.4924627061444546, -0.03694145728188365, 0.3043223214471687, 0.7621709417435221, -0.08976075316389806, 1.7248494980393287, -1.3929221179119406, -0.02691021754712225, -0.8013904514204571, -1.8723150862096274, -0.1719074579047829, 0.13761473033990487, -0.05362111155064134, -1.1514299974306592, -3.0352878899739646}, {-0.46598309592289255, -2.1197626323543624, 0.010503049519733236, -0.5998363219531991, -1.4399721982277716, -1.6282185737160524, -1.5298836289679774, -1.3717994227587271, -0.5456314625765403, -2.278205723464903, 3.5058353998784177, 0.25233242077629014, -0.5982146105459081, 1.517506587957546, 1.0918610085795228, 3.39154309890217}, {-0.15108682509419308, -1.1762346929282788, -0.5216697927624592, 2.771601719649874, 1.9412846063649967, 1.357821748155013, 1.062850445309956, 1.5211505812651507, -0.5228803651906211, -0.0545168111373457, 0.8914877071398948, -3.0367944477302893, 1.0525955321630842, -1.6391192763500588, -1.1278295615948482, -1.9242456678944047}, {2.603450696538206, 2.6564054782256634, -0.556857788801502, 0.824351057324641, 1.8371483557421742, -3.1649300248763708, 2.3243389768785216, 0.8372635625576825, -1.226209389015433, 1.2308477934865147, -1.0627290816979875, -3.1405714804193385, 1.000095173677152, 3.693853540331865, 1.3909556699876318, -0.07193879324009367}, {1.6244495651842177, 1.3240502583069422, 1.2900676447885038, -0.19780537397360531, 0.6484417715124123, 1.0498759500532258, -0.1443420061987257, -2.82208136711984, -0.5486315929308184, 0.39586214139662, 1.2692169086061833, -0.8537466154202591, 0.34449975237555797, 1.3129505729500381, -1.5245255441014358, 1.4847969114849564}, {0.8679984148741755, -0.19592366884347948, -0.67603271185828, 2.2568581044333746, 0.6582619894318263, 0.1563450047002612, -2.670184060093104, 1.6040655892308031, -3.389099597416583, 0.7157484551558226, -0.9345397690795108, -0.8607716644403299, -1.7206112971706669, 1.98798921165376, -1.5977923863212067, 0.9644827903828594}, {1.263268857631994, -2.9548914097972268, 2.6805041585827163, -0.6576423446331754, -0.3127904984476147, -3.2523143215667045, -2.580380334585324, 1.0394753589095367, -1.4147765854745322, -1.1746538189656848, -0.8228972103056799, -1.516644092377039, 0.266887462627737, -0.9711719554421939, 1.112982344707231, 0.7971920182400265}}, {{-0.4860254410942974, -0.6194262656065006, -0.7769422065883071, 0.8338549618871587, 0.6485263977031217, 1.1279400523384522, -2.028747705419595, 1.2805086324359896, 0.039396103429036114, 2.415165735582428, -0.28234931838652744, 3.5266102890008737, -1.8024778364351335, -1.258897455621466, 0.974582813309316, 2.7285078010336323}, {-1.6516178696560384, 0.17888695696269705, -2.630744209701176, -0.6340482363763832, -0.18384336862213072, 0.9245609815372181, 0.6105280977790325, -1.4625853471872532, -0.339086819909844, 2.5292581182679057, 0.9342521029961597, -0.010894832512187785, -0.16026544383806562, -0.008889046900975944, -2.267854749844126, 0.13575083355629566}, {2.784532742390145, -2.68056699047453, 0.31728774421991945, -0.1819338074355199, -0.39018956169862773, 0.06849170395967374, -1.2047246655090147, -0.9304678296906171, 4.047980563380523, 0.8619201034429581, 0.17968017049451163, -1.7004381095567425, -0.6633126988699314, -3.0606534617293577, -1.090721059118896, -0.568964714778695}, {3.0040163818249273, 0.3032216862867021, 0.002015811970518616, 2.1979994311284714, 0.1938503728654009, -3.1248768800170046, -1.0214719863279473, -0.6034857067350232, 0.33903599778805293, 0.15947080215688092, -2.1562096103965422, 0.7135332878631722, -2.906631854150396, 1.2923651625493529, -2.736542040275952, 1.39335082806674}, {1.6658052331086692, -0.3694749787902525, -1.1872816658156355, -0.5414251828879348, -1.2196131181266814, -3.3374916764224416, -0.7061011514549342, -1.0787987357629338, -0.19134159651777277, 1.0312315343863792, -0.46109537352659663, -1.6198486512489645, -2.218156353823187, -0.03082970370176838, 0.8344226954246785, 2.080173184817724}, {0.43707544542372795, -0.37098459330335504, 1.660757883957758, 1.0787040465895272, -3.4188836746420828, -0.015743863726727758, 0.19806602784745106, 0.18237196891428425, 1.0343484552738733, -0.9705368339425583, -0.47848521981747155, 2.171261997901746, -0.4081075352257163, 0.5800019086441117, 2.156496178002347, -4.347841115046819}, {-1.8515160795438572, 1.0264512819914489, 2.137071577400735, -0.049192729922046485, 0.5841905155607573, -0.22511673856260722, 0.30742194216860297, 0.341891579711231, 0.5394994915353811, -1.6742105621927146, 0.2777494602019278, -0.6793549775543831, -0.44896328021972387, -0.2904623530634096, -2.2136034826029256, -2.472079119630251}, {-2.3764342963996086, 3.691654011697599, 0.20271131852423865, 0.4831106456295157, 0.19629522084478482, -1.5035672965181612, -0.8133408374063699, -2.036097536930798, -0.2879162361922463, -2.635183274973035, -0.764403996182087, -1.991590869080342, -2.1293047480005955, -0.9464806028975553, -1.3761481536043085, -1.0624957158788952}, {-0.42016828505215154, -2.0343807413353696, -1.2747995830174936, 2.604630224854037, -0.9508310995319093, 0.487940830158508, -1.6845158971830252, 1.0851094335391047, 0.19246901741579808, 0.3798940087689233, 1.5842637977308485, 3.5568259226530277, 0.13039604628580523, 1.0001503196073669, -3.2151204576995323, 1.7534015916390675}, {0.23851757464684234, -1.4877187710697257, -1.9283881650724344, 0.4850286849530958, -0.10103708771019179, -0.7411570608621696, -0.7597620805941605, -0.9562967596809544, 0.3417847722857217, 1.9654713443257728, 3.333141686365916, 1.785397288087827, -0.3348942049936009, 0.09475676303268933, -0.20965765870329395, 0.8246271208652616}, {-0.8337093408903269, -0.2972371838883942, 1.4711541879606853, -2.6861982705655842, -2.259278659690011, 1.7306989403068607, 2.184394120411647, -1.5278402371468154, 1.7715909120817097, 1.5013502834703705, -1.6673069368136177, -0.35071353222734, -0.10185204064338346, 2.403380662563428, -1.2593965586247888, 0.6511619150704102}, {0.40796767229503966, 1.9198392270492568, -2.143719524243546, 0.14499640805177558, -2.501690422164162, 1.022326194276291, -0.9384434907524913, -1.0840537493132418, -0.4269785030610614, 0.8289353991864601, 0.98925801628969, -0.28464649011288023, -2.1866030255022557, 1.3325966850470732, 3.4448306717732464, 1.4932861150660697}, {-0.6864924414988006, -1.9359379210941732, -1.8773532189559543, 1.8991454161103254, -0.3705491467996468, 1.8144409134433064, -0.6036153065132892, -1.0127203417946922, 0.20064318019955002, 4.014535010647913, -1.5566768280316996, 1.4231358496049678, 1.4874646805327505, 0.45906318785132955, 0.796617207743053, 0.40939306732621866}, {0.4397606680024666, 2.9395785440207454, -1.3315119670597264, 1.179424581641823, 0.2406201030606401, -2.2794221141685016, -1.1240563542397402, 0.18874910969016956, 0.1924330769331945, 1.6755477173183473, 0.656838356281903, 0.010031577402246902, -0.009424779961568402, -0.33144569631579124, 2.4997591623471753, -0.7455060957653864}, {0.34667310856728295, 3.1542841082881505, 0.5910209968754049, 0.9375996649682672, -1.0949850694680299, -1.4843146021735878, 0.22520779293723686, -1.4419058758834864, -1.8178205272201564, 0.34396607816209945, 0.12390850940320253, -0.441079424877544, 0.7787327502449696, -0.19013055192114486, -0.6969111755769491, 1.189282508477703}, {-1.6715715232290183, 1.270959400423112, -2.218087217443583, -0.9888864799837775, 0.7107524999540495, 1.6184421284199275, 2.5079883248576404, 2.3563205605713193, 0.708390426182016, 1.8056023609786513, -0.39928553568452574, -0.2316088874009737, -0.84003782852421, -0.9330449233391724, 3.344786066720363, -0.32647506605297294}}, {{-0.549244945512767, 0.3786167247449177, 1.0621417949761451, -1.1460150294480167, 0.05289931624816667, 1.5629562720573111, -0.3549879282805602, 1.0184530030554626, -1.3854756245615831}, {0.5019578605789068, 1.0723720411892566, -2.428529909477178, 1.5675708235130206, 1.206154421399153, -1.5948129062628107, 2.102587005652243, -0.7151537841365729, 0.1749119505736853}, {-3.401737209375447, -0.28366734972758967, 1.5237265856525428, -0.789551794393648, 0.10068276178105451, 3.6750566995453138, -1.4199882122086454, 0.20578503624756747, -0.4638733716311777}, {-0.9908186342575114, 1.3490366209434372, -2.4249864644525427, 1.4747033218386048, 3.124480041945922, -1.4966865513560923, -0.929170521273795, 2.5619866717806623, -0.8732233947610435}, {-3.1283307435938172, -1.6640257694986542, -0.930148963558219, 3.089014272939139, -0.13040206940303764, 2.1285078465844127, -2.2651661888707797, -0.7984392091161298, 0.14772431792975396}, {2.363074061603602, 0.9203319527500706, 0.26686711543430275, 0.7474702618097446, 1.6048766877832816, 0.40264813862671744, 3.9586992719531744, -2.047925392660706, 0.08801058722855569}, {-3.426126242437557, 1.0951685606700041, -1.4566418710174904, 0.3671984303509192, -1.7688673158059933, -0.700154963758558, -1.4924693088099197, 1.991692619619433, -1.6062075467494843}, {0.6736697971135055, -2.15548783745633, -0.17991272874418193, 1.9958132565368376, 0.5328151814859522, 0.9710700315824332, -0.046833473783728014, -3.65793529705472, -0.438814716343816}, {1.1304919559331617, -0.735750652698076, 0.8086430031193074, 1.629880631797275, -1.9317898299090546, -3.5563247916724365, -1.2875837269243127, 1.0083528621038282, 0.41532564900477587}, {-1.3900988045083131, 1.5938261684452841, -4.491057366979354, -3.485200750711342, -0.8327362513165857, -0.8240322120414757, 3.2800259763202493, 2.285822393482379, 1.248517807926145}, {2.184141595458708, -0.33075221388342263, -0.08773515336310361, 0.17531961981535069, 1.8340940701082409, 0.39965888262544425, -0.21075441357360264, -0.9292212928854479, 0.8405587772822427}, {-1.545258897147419, 1.0808116707718989, 0.9402711731556269, -1.3275609063670606, -2.299025965489417, -0.5779575442061148, 0.19204595255006124, 1.8194973267011312, -1.0504190690719404}, {1.1499437982583023, -0.4348448306110162, 1.8099754925353135, -1.9886264698846121, 2.500158329455529, -0.18703337216842006, 1.3056891112946163, 1.4103165990213993, 3.0684949774728514}, {-1.9618821316475952, 1.5037852155787823, 1.9452417297880746, 2.8187305390556663, 0.04823291341940264, -1.1232934949084723, -1.083000409540998, 0.7038499112752284, 2.6570996458949048}, {0.979282848753903, -2.6741083945286412, 0.7810219338006126, 1.3998016371383286, -0.6514036709181756, -0.41121511452045706, 3.026186410576904, 3.40383562939084, 0.05541493684245572}, {-1.0187854463597503, -1.3726588907332735, 0.15314348041183412, 1.630380787135291, -2.0193845091200284, -1.5645607088420652, 1.4754780764041968, 2.9693362486696353, -0.9887725840574408}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}}};/*weights_end*/
/*biases_start*/double[][] biases = {{0, 0, 0, 0, 0, 0, 0}, {-1.7106651170696112, -1.5869009367264777, 2.8584780615230065, -0.982641894656357, 1.2938433211962963, -1.1229288334391136, -1.0581869350617898, -1.53555790112946, 0.6339953059884117, -2.7193100891005084, -0.07449701161843528, 1.8822180797666481, 0.9000766132967639, -1.8727177795427117, -1.2494246319565792, 0.7211908946943144}, {-0.1020233921599458, -2.7628645752503824, 1.8026715213778128, -0.4603755056648947, -0.974567507250916, -1.1318888027033256, 0.37055755455006145, 0.7391818565255361, -0.13872126477317598, -0.09093993984833992, 0.837793724782975, -2.0185742209685595, 0.047409895066586286, -2.363099013624743, -0.2460266123476375, -3.5569808914660634}, {1.5946219468378398, -0.1952549335882285, 0.9833671493874545, 1.2464908098543306, -1.9257401007364803, 0.2871833795074416, -2.1596266216605366, 2.4300121539130957, -0.062206060685914305}};/*biases_end*/

    void runFirstTurn() {
        communication.downloadAllyBase();
        communication.downloadMapBoundariesAndEnemyBase();

        if(weights.length != LAYER_SIZES.length)
            if(loggingOn) uc.println("ERROR 1");
        if(biases.length != LAYER_SIZES.length)
            if(loggingOn) uc.println("ERROR 2");
        for(int layer = 0; layer < LAYER_SIZES.length; layer++) {
            if(weights[layer].length != LAYER_SIZES[layer])
                if(loggingOn) uc.println("ERROR 3");
            if(biases[layer].length != LAYER_SIZES[layer])
                if(loggingOn) uc.println("ERROR 4");
        }
    }

    void run() {
        communication.downloadMapBoundariesAndEnemyBase();
        communication.lookForMapBoundaries();

        communication.addAllyAlive();

        UnitInfo nearestEnemyOrNeutral = getNearestEnemyOrNeutral();
        int[] inputData = getInputData(nearestEnemyOrNeutral);
        if(loggingOn) uc.println("inputData " + Arrays.toString(inputData));
        double[] outputs = forwardPropagate(inputData);
        if(loggingOn) uc.println("outputs " + Arrays.toString(outputs));
        Direction outputDirection = getDirectionFromOutputs(outputs);
        if(loggingOn) uc.println("outputDirection " + outputDirection);

        if(nearestEnemyOrNeutral != null) {
            if(loggingOn) uc.println("nearestEnemyOrNeutral " + nearestEnemyOrNeutral.getLocation());
            int damage = tryAttack(nearestEnemyOrNeutral.getLocation());
            if(damage != 0)
                communication.addScore(damage);
        }
        tryMove(outputDirection);
    }

    int[] getInputData(UnitInfo nearestEnemyOrNeutral) {
        Location selfLocation = uc.getLocation();
        int relativeAllyBaseX = selfLocation.x - communication.allyBaseLocation.x;
        int relativeAllyBaseY = selfLocation.y - communication.allyBaseLocation.y;
        int nearestEnemyOrNeutralExists = 0;
        int relativeNearestEnemyOrNeutralX = 0;
        int relativeNearestEnemyOrNeutralY = 0;
        int relativeNearestEnemyOrNeutralIsExplorer = 0;
        int relativeNearestEnemyOrNeutralIsMage = 0;
        if(nearestEnemyOrNeutral != null) {
            Location nearestEnemyOrNeutralLocation = nearestEnemyOrNeutral.getLocation();
            UnitType nearestEnemyOrNeutralType = nearestEnemyOrNeutral.getType();
            nearestEnemyOrNeutralExists = 1;
            relativeNearestEnemyOrNeutralX = selfLocation.x - nearestEnemyOrNeutralLocation.x;
            relativeNearestEnemyOrNeutralY = selfLocation.y - nearestEnemyOrNeutralLocation.y;
            if(nearestEnemyOrNeutralType == UnitType.EXPLORER)
                relativeNearestEnemyOrNeutralIsExplorer = 1;
            else if(nearestEnemyOrNeutralType == UnitType.MAGE)
                relativeNearestEnemyOrNeutralIsMage = 1;
        }
        int[] inputData = {relativeAllyBaseX, relativeAllyBaseY, nearestEnemyOrNeutralExists,
                relativeNearestEnemyOrNeutralX, relativeNearestEnemyOrNeutralY,
                relativeNearestEnemyOrNeutralIsExplorer, relativeNearestEnemyOrNeutralIsMage};
        return inputData;
    }

    double relu(double x) {
        if(x > 0)
            return x;
        return 0;
    }

    double sigmoid(double x) {
        return 1 / (1 + Math.exp(-x));
    }

    double[] forwardPropagate(int[] inputData) {
        double[][] activations = new double[LAYER_SIZES.length][];
        for(int layer = 1; layer < LAYER_SIZES.length; layer++) {
            activations[layer] = new double[LAYER_SIZES[layer]];
            for(int neuron = 0; neuron < activations[layer].length; neuron++) {
                activations[layer][neuron] = 0;
                if(layer == 1) {
                    for(int previousNeuron = 0; previousNeuron < inputData.length; previousNeuron++) {
                        activations[layer][neuron] += inputData[previousNeuron] * weights[layer - 1][previousNeuron][neuron];
                    }
                }
                else {
                    for(int previousNeuron = 0; previousNeuron < activations[layer - 1].length; previousNeuron++) {
                        activations[layer][neuron] += activations[layer - 1][previousNeuron] * weights[layer - 1][previousNeuron][neuron];
                    }
                }

                activations[layer][neuron] += biases[layer][neuron];

                if(layer == LAYER_SIZES.length - 1)
                    activations[layer][neuron] = sigmoid(activations[layer][neuron]);
                else
                    activations[layer][neuron] = relu(activations[layer][neuron]);
            }
        }

        int outputLayer = LAYER_SIZES.length - 1;
        double[] outputs = new double[LAYER_SIZES[outputLayer]];
        for(int neuron = 0; neuron < activations[outputLayer].length; neuron++) {
            outputs[neuron] = activations[outputLayer][neuron];
        }
        return outputs;
    }

    Direction getDirectionFromOutputs(double[] outputs) {
        double highestOutput = 0;
        int highestOutputIndex = 0;
        for(int i = 0; i < outputs.length; i++) {
            if(outputs[i] > highestOutput) {
                highestOutput = outputs[i];
                highestOutputIndex = i;
            }
        }
        return directions[highestOutputIndex];
    }
}